aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadfghjkljhhhhfuririiiiiiiiirrfkfkljjggggggggggggggggghhhhhhhhhhhhhhhhhh
# 4.6  设置代码格式
# 随着你编写的程序越来越长,有必要了解一些代码格式设置约定。请花时间让你的代码尽可能易于阅读;让代码易于阅读有助于你掌握程序是做什么的,也可以帮助他人理解你
# 编写的代码。
# 为确保所有人编写的代码的结构都大致一致, Python 程序员都遵循一些格式设置约定。学会编写整洁的 Python 后,就能明白他人编写的 Python 代码的整体结构 —— 只要他们和你遵
# 循相同的指南。要成为专业程序员,应从现在开始就遵循这些指南,以养成良好的习惯。
# 4.6.1  格式设置指南
# 若要提出 Python 语言修改建议,需要编写 Python 改进提案 ( Python Enhancement Proposal , PEP )。 PEP 8 是最古老的 PEP 之一,它向 Python 程序员提供了代码格式设置指南。 PEP 8 的
# 篇幅很长,但大都与复杂的编码结构相关。
# Python 格式设置指南的编写者深知,代码被阅读的次数比编写的次数多。代码编写出来后,调试时你需要阅读它;给程序添加新功能时,需要花很长的时间阅读代码;与其他程序
# 员分享代码时,这些程序员也将阅读它们。
# 如果一定要在让代码易于编写和易于阅读之间做出选择, Python 程序员几乎总是会选择后者。下面的指南可帮助你从一开始就编写出清晰的代码。
# 4.6.2  缩进
# PEP 8 建议每级缩进都使用四个空格,这既可提高可读性,又留下了足够的多级缩进空间。
# 在字处理文档中,大家常常使用制表符而不是空格来缩进。对于字处理文档来说,这样做的效果很好,但混合使用制表符和空格会让 Python 解释器感到迷惑。每款文本编辑器都提
# 供了一种设置,可将输入的制表符转换为指定数量的空格。你在编写代码时应该使用制表符键,但一定要对编辑器进行设置,使其在文档中插入空格而不是制表符。
# 在程序中混合使用制表符和空格可能导致极难解决的问题。如果你混合使用了制表符和空格,可将文件中所有的制表符转换为空格,大多数编辑器都提供了这样的功能。
# 4.6.3  行长
# 很多 Python 程序员都建议每行不超过 80 字符。最初制定这样的指南时,在大多数计算机中,终端窗口每行只能容纳 79 字符;当前,计算机屏幕每行可容纳的字符数多得多,为何还
# 要使用 79 字符的标准行长呢?这里有别的原因。专业程序员通常会在同一个屏幕上打开多个文件,使用标准行长可以让他们在屏幕上并排打开两三个文件时能同时看到各个文件
# 的完整行。 PEP 8 还建议注释的行长都不超过 72 字符,因为有些工具为大型项目自动生成文档时,会在每行注释开头添加格式化字符。
# PEP 8 中有关行长的指南并非不可逾越的红线,有些小组将最大行长设置为 99 字符。在学习期间,你不用过多地考虑代码的行长,但别忘了,协作编写程序时,大家几乎都遵守
# PEP 8 指南。在大多数编辑器中,都可设置一个视觉标志 —— 通常是一条竖线,让你知道不能越过的界线在什么地方。
# 注意  附录 B 介绍了如何配置文本编辑器,以使其:在你按制表符键时插入四个空格;显示一条垂直参考线,帮助你遵守行长不能超过 79 字符的约定。
# 4.6.4  空行
# 要将程序的不同部分分开,可使用空行。你应该使用空行来组织程序文件,但也不能滥用;只要按本书的示例展示的那样做,就能掌握其中的平衡。例如,如果你有 5 行创建列表
# 的代码,还有 3 行处理该列表的代码,那么用一个空行将这两部分隔开是合适的。然而,你不应使用三四个空行将它们隔开。
# 空行不会影响代码的运行,但会影响代码的可读性。 Python 解释器根据水平缩进情况来解读代码,但不关心垂直间距。
# 4.6.5  其他格式设置指南
# PEP 8 还有很多其他的格式设置建议,但这些指南针对的程序大都比目前为止本书提到的程序复杂。等介绍更复杂的 Python 结构时,我们再来分享相关的 PEP 8 指南。
# 动手试一试
# 4-14 PEP 8 :请访问 https://python.org/dev/peps/pep-0008/ ,阅读 PEP 8 格式设置指南。当前,这些指南适用的不多,但你可以大致浏览一下。
# 4-15 代码审核 :从本章编写的程序中选择三个,根据 PEP 8 指南对它们进行修改。
# 每级缩进都使用四个空格。对你使用的文本编辑器进行设置,使其在你按 Tab 键时都插入四个空格;如果你还没有这样做,现在就去做吧(有关如何设置,请参
# 阅附录 B )。
# 每行都不要超过 80 字符。对你使用的编辑器进行设置,使其在第 80 个字符处显示一条垂直参考线。
# 不要在程序文件中过多地使用空行。
# 4.7  小结
# 在本章中,你学习了:如何高效地处理列表中的元素;如何使用 for 循环遍历列表, Python 如何根据缩进来确定程序的结构以及如何避免一些常见的缩进错误;如何创建简单的
# 数字列表,以及可对数字列表执行的一些操作;如何通过切片来使用列表的一部分和复制列表。你还学习了元组(它对不应变化的值提供了一定程度的保护),以及在代码变得
# 越来越复杂时如何设置格式,使其易于阅读。
# 在第 5 章中,你将学习如何使用 if 语句在不同的条件下采取不同的措施;学习如何将一组较复杂的条件测试组合起来,并在满足特定条件时采取相应的措施。你还将学习如何在
# 遍历列表时,通过使用 if 语句对特定元素采取特定的措施。